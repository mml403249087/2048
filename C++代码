#include <iostream>  
#include <windows.h>  
#include <ctime>  
using namespace std;  
  
int const ROW = 4;  
int const COL = 4;  
int game[ROW][COL] = {0};  
  
//上下左右  
int const UP = 1;  
int const DOWN = 2;  
int const LEFT = 3;  
int const RIGHT = 4;  
  
//游戏所处的状态  
int const GAME_OVER = 1;  
int const GAME_WIN = 2;  
int const GAME_CONTINUE = 3;
int move = 0;  
  
enum GameNum  
{  
    Game_2 = 2,  
    Game_4 = 4,  
    Game_8 = 8,  
    Game_16 = 16,  
    Game_32 = 32,  
    Game_64 = 64,  
    Game_128 = 128,  
    Game_256 = 256,  
    Game_512 = 512,  
    Game_1024 = 1024,  
    Game_2048 = 2048,  
};  
  
//打印所得的数组  
void Print()  
{  
    system("cls");  
    cout << "*****************  2048 控 制 台 版  ******************" << endl;  
    cout << "*****************  By Tanzf (Intern) ******************" << endl << endl;  
    for (int i = 0; i < ROW; ++i)  
    {  
        cout << "---------------------------------"<< endl;  
        for (int j = 0; j < COL; ++j)  
        {  
            if (game[i][j] == 0)  
            {  
                cout <<"|   \t";  
            }  
            else   
            {  
                cout <<"|   " << game[i][j] << "\t";  
            }  
        }  
        cout << "|" << endl;  
    }  
    cout << "---------------------------------"<< endl;  
}  
  
  
bool CreateNumber()  
{  
    int x = -1;  
    int y = -1;  
    int times = 0;  
    int maxTimes = ROW * COL;  
    //三分之二的概率生成2，三分之一的概率生成4  
    int whitch = rand() % 3;  
    do   
    {  
        x = rand() % ROW;  
        y = rand() % COL;  
        ++times;  
    } while (game[x][y] != 0 && times <= maxTimes);  
  
    //说明格子已经满了  
    if(times >= maxTimes)  
    {  
        return false;  
    }  
    else  
    {  
        GameNum num;  
        if(whitch == 0)  
        {  
            num = Game_4;  
        }  
        else if(whitch)  
        {  
            num = Game_2;  
        }  
        game[x][y] = num;  
    }  
  
    return true;  
}  
  
void Process(int direction)  
{  
    int flag = 0;
	switch (direction)  
    {  
    case UP:  
        //最上面一行不动  
        for(int col = 0; col < COL; ++col)
        {  
            for(int row = 0; row < ROW; ++row)   
			{
				flag = -1;
				for(int crow = row+1; crow < ROW; ++crow)
				{
					if(game[crow][col] != 0)
					{
						flag = crow;
						break;
					}
				}
				if(flag != -1)
				{
					if(game[row][col] == 0)
					{
						game[row][col] = game[flag][col];
						game[flag][col] = 0;
						move = 1;
//						row--;
					}
					else if(game[row][col] == game[flag][col])
					{
						game[row][col] = game[row][col]*2;
						game[flag][col] = 0;
						move = 1;
					}
				}
			}	
		} 
			  
        break;  
    case DOWN:  
        //最下面一行不动  
        for(int col = 0; col < COL; ++col)
        {  
            for(int row = 3; row >= 0; --row)   
			{
				flag = -1;
				for(int crow = row-1; crow >= 0; --crow)
				{
					if(game[crow][col] != 0)
					{
						flag = crow;
						break;
					}
				}
				if(flag != -1)
				{
					if(game[row][col] == 0)
					{
						game[row][col] = game[flag][col];
						game[flag][col] = 0;
						move = 1;
//						row--;
					}
					else if(game[row][col] == game[flag][col])
					{
						game[row][col] = game[row][col]*2;
						game[flag][col] = 0;
						move = 1;
					}
				}
			}	
		}   
        break;  
    case LEFT:  
        //最左边一列不动
        for(int row = 0; row < ROW; ++row)
        {  
            for(int col = 0; col < COL; ++col)   
			{
				flag = -1;
				for(int ccol = col+1; ccol < COL; ++ccol)
				{
					if(game[row][ccol] != 0)
					{
						flag = ccol;
						break;
					}
				}
				if(flag != -1)
				{
					if(game[row][col] == 0)
					{
						game[row][col] = game[row][flag];
						game[row][flag] = 0;
						move = 1;
//						row--;
					}
					else if(game[row][col] == game[row][flag])
					{
						game[row][col] = game[row][col]*2;
						game[row][flag] = 0;
						move = 1;
					}
				}
			}	
		}  
        break;  
    case RIGHT:  
        //最右边一列不动 
		for(int row = 0; row < ROW; ++row) 
        {  
			for(int col = 3; col >= 0; --col)   
			{
				flag = -1;
				for(int ccol = col-1; ccol >= 0; --ccol)
				{
					if(game[row][ccol] != 0)
					{
						flag = ccol;
						break;
					}
				}
				if(flag != -1)
				{
					if(game[row][col] == 0)
					{
						game[row][col] = game[row][flag];
						game[row][flag] = 0;
						move = 1;
//						row--;
					}
					else if(game[row][col] == game[row][flag])
					{
						game[row][col] = game[row][col]*2;
						game[row][flag] = 0;
						move = 1;
					}
				}
			}	
		}  
        break;  
    }  
  
}  
  
//处理输入输出，返回上下左右  
int Input()  
{  
    //读取上下左右四个方向键  
    int upArrow = 0;  
    int downArrow = 0;  
    int leftArrow = 0;  
    int rightArrow = 0;  
    int direction = 0;  
    while (true)  
    {  
        upArrow = GetAsyncKeyState(VK_UP);  
        downArrow = GetAsyncKeyState(VK_DOWN);  
        leftArrow = GetAsyncKeyState(VK_LEFT);  
        rightArrow = GetAsyncKeyState(VK_RIGHT);  
  
        if(upArrow)  
        {  
            direction = UP;  
            break;  
        }  
        else if(downArrow)  
        {  
            direction = DOWN;  
            break;  
        }  
        else if(leftArrow)  
        {  
            direction = LEFT;  
            break;  
        }  
        else if(rightArrow)  
        {  
            direction = RIGHT;  
            break;  
        }  
  
        Sleep(100);  
    }  
  
    return direction;  
}  
  
//判断游戏状态  
int Judge()  
{  
    //赢得游戏  
    for(int i = 0; i < ROW; ++i)  
    {  
        for(int j = 0; j < COL; ++j)  
        {  
            if(game[i][j] == 2048)  
            {  
                return GAME_WIN;  
                break;  
            }  
        }  
    }  
  
    //横向检查  
    for(int i = 0 ; i < ROW; ++i)  
    {  
        for(int j = 0; j < COL - 1; ++j)  
        {  
            if(!game[i][j] || (game[i][j] == game[i][j+1]))  
            {  
                return GAME_CONTINUE;  
                break;  
            }  
        }  
    }  
    //纵向检查  
    for(int j = 0; j< COL; ++j)  
    {  
        for(int i = 0; i < ROW -1; ++i)  
        {  
            if(!game[i][j] || (game[i][j] == game[i+1][j]))  
            {  
                return GAME_CONTINUE;  
                break;  
            }  
        }  
    }  
  
    //不符合上述两种状况，游戏结束  
    return GAME_OVER;  
  
}  
  
int main()  
{  
    //设置一个随机数种子  
    srand((unsigned int)time(0));  
    CreateNumber();  
    CreateNumber();  
    Print();  
    int direction = 0;  
    int gameState = -1;  
    while(true)  
    {  
        direction = Input();  
  
        gameState = Judge();  
        if(direction && gameState == GAME_CONTINUE)  
        {  
            move = 0;
			Process(direction);
			if(move == 1)
			{
				CreateNumber();  
        		Print();  
            	Sleep(100); 
			}  
			else
			{
			  	Print();
			  	Sleep(100); 
			}
             
        }  
        else if(gameState == GAME_WIN)  
        {  
            Print();  
            cout << "You Win！" << endl;  
            break;  
        }  
        else if(gameState == GAME_OVER)  
        {  
            Print();  
            cout <<"You lose!" << endl;  
            break;  
        }  
    }  
  
    return 0;  
}  
